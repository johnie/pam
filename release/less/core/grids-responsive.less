/*csslint regex-selectors:false, known-properties:false, duplicate-properties:false*/


//  Imports
// ==========================================================================

@import "variables";
@import "../mixins/lesshat-prefixed";


/***
 * Grids:
 * PAM comes with a 5ths and 24ths based grid and to wield the grids power there are
 * some concepts to keep in mind. PAM Grid consist of two types of attribute selectors:
 * `pam-Grid` and `pam-Unit`. All child elements of a grid must be units. Child elements
 * contained within an grid element must be a grid unit. All content which is visible
 * needs to be contained inside a grid unit.
 */

[pam-Grid] {
    letter-spacing: -0.31em; /* Webkit: collapse white-space between units */
    text-rendering: optimizespeed; /* Webkit: fixes text-rendering: optimizeLegibility */

    /*
    Sets the font stack to fonts known to work properly with the above letter
    and word spacings. See: https://github.com/yahoo/pure/issues/41/

    The following font stack makes Pure Grids work on all known environments.

    * FreeSans: Ships with many Linux distros, including Ubuntu

    * Arimo: Ships with Chrome OS. Arimo has to be defined before Helvetica and
      Arial to get picked up by the browser, even though neither is available
      in Chrome OS.

    * Droid Sans: Ships with all versions of Android.

    * Helvetica, Arial, sans-serif: Common font stack on OS X and Windows.
    */
    font-family: FreeSans, Arimo, "Droid Sans", Helvetica, Arial, sans-serif;

    /*
    Use flexbox when possible to avoid `letter-spacing` side-effects.

    NOTE: Firefox (as of 25) does not currently support flex-wrap, so the
    `-moz-` prefix version is omitted.
    */

    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    flex-flow: row wrap;
    -webkit-flex-flow: row wrap;
    -ms-flex-flow: row wrap;
    .hook-grid;
}


/**
 * Grid 5ths-Based:
 * `pam-Unit="[1-5]-5"` Generates fractions for the 5ths-Based grid.
 *
 *     @example
 *     <div pam-Grid>
 *          <div pam-Unit="1-5">
 *              <div pam-Unit-Test>1/5</div>
 *          </div>
 *          <div pam-Unit="4-5">
 *              <div pam-Unit-Test>4/5</div>
 *          </div>
 *     </div>
 */

/**
 * Grid 24ths-Based:
 * `pam-Unit="[1-24]-24"` Generates fractions for the 24ths-Based grid.
 *
 *     @example
 *     <div pam-Grid>
 *          <div pam-Unit="2-24">
 *              <div pam-Unit-Test>2/24</div>
 *          </div>
 *          <div pam-Unit="4-24">
 *              <div pam-Unit-Test>4/24</div>
 *          </div>
 *          <div pam-Unit="8-24">
 *              <div pam-Unit-Test>8/24</div>
 *          </div>
 *          <div pam-Unit="10-24">
 *              <div pam-Unit-Test>10/24</div>
 *          </div>
 *     </div>
 */

/**
 * Nested Grid:
 * Grids can be nested. This examples shows a grid with two 1-2 units
 * that each contains a grid.
 *
 *     @example
 *     <div pam-Grid>
 *          <div pam-Unit="1-2">
 *              <div pam-Unit-Test>
 *                <div pam-Grid>
 *                      <div pam-Unit="1-2">
 *                        <div pam-Unit-Test>1-2</div>
 *                      </div>
 *                      <div pam-Unit="1-2">
 *                        <div pam-Unit-Test>1-2</div>
 *                      </div>
 *                </div>
 *              </div>
 *          </div>
 *
 *          <div pam-Unit="1-2">
 *              <div pam-Unit-Test>
 *                <div pam-Grid>
 *                      <div pam-Unit="1-3">
 *                        <div pam-Unit-Test>1-3</div>
 *                      </div>
 *                      <div pam-Unit="1-3">
 *                        <div pam-Unit-Test>1-3</div>
 *                      </div>
 *                      <div pam-Unit="1-3">
 *                        <div pam-Unit-Test>1-3</div>
 *                      </div>
 *                </div>
 *              </div>
 *          </div>
 *     </div>
 */


/**
 * Media Queries:
 * To control responsive grids, use the default breakpoints with their
 * correspinding attribute selector `pam-Unit="[breakpointName]:[size]"`. For more
 * details on how to use, have a look at the responsive grids section.
 *
 *     @example
 *     <table pam-Table="striped">
 *      <thead>
 *          <tr>
 *            <th>Key</th>
 *            <th>Attribute</th>
 *            <th>Applies</th>
 *            <th>Media Query</th>
 *          </tr>
 *      </thead>
 *      <tbody>
 *        <tr>
 *          <td>none</td>
 *          <td>`pam-Unit="[size]"`</td>
 *          <td>Always</td>
 *          <td>None</td>
 *        </tr>
 *        <tr>
 *          <td>`small`</td>
 *          <td>`pam-Unit="small:[size]"`</td>
 *          <td>≥ 480px</td>
 *          <td>@media screen and (min-width: 480px)</td>
 *        </tr>
 *        <tr>
 *          <td>`medium`</td>
 *          <td>`pam-Unit="medium:[size]"`</td>
 *          <td>≥ 768px</td>
 *          <td>@media screen and (min-width: 768px)</td>
 *        </tr>
 *        <tr>
 *          <td>`large`</td>
 *          <td>`pam-Unit="large:[size]"`</td>
 *          <td>≥ 960px</td>
 *          <td>@media screen and (min-width: 960px)</td>
 *        </tr>
 *        <tr>
 *          <td>`xlarge`</td>
 *          <td>`pam-Unit="xlarge:[size]"`</td>
 *          <td>≥ 1200px</td>
 *          <td>@media screen and (min-width: 1200px)</td>
 *        </tr>
 *      </tbody>
 *     </table>
 */


/**
 * Responsive Grid:
 * `pam-Unit="1-1 small:1-2 large:1-4"` Creates a responsive grid. On small devices it will
 *  have width: 100%, then it will shrink to become width: 50% on small-sized screens and
 *  shrink even more to 25% on large-sized screens and above.
 *
 *     @example
 *     <div pam-Grid>
 *          <div pam-Unit="1-1 small:1-2 large:1-4">
 *              <div pam-Unit-Test>1-1 -> 1-2 -> 1-4</div>
 *          </div>
 *          <div pam-Unit="1-1 small:1-2 large:1-4">
 *              <div pam-Unit-Test>1-1 -> 1-2 -> 1-4</div>
 *          </div>
 *          <div pam-Unit="1-1 small:1-2 large:1-4">
 *              <div pam-Unit-Test>1-1 -> 1-2 -> 1-4</div>
 *          </div>
 *          <div pam-Unit="1-1 small:1-2 large:1-4">
 *              <div pam-Unit-Test>1-1 -> 1-2 -> 1-4</div>
 *          </div>
 *     </div>
 */


/**
 * Responsive Grid Landscape:
 * `pam-Unit="1-1 small:1-2 small:landscape:1-3"` Creates a responsive grid which has the
 * additional landscape state. On a small device and in landscape the unit width will shrink to 33%.
 *
 *     @example
 *     <div pam-Grid>
 *          <div pam-Unit="1-1 small:1-2 small:landscape:1-3">
 *              <div pam-Unit-Test>1-1 -> 1-2 -> landscape:1-3</div>
 *          </div>
 *          <div pam-Unit="1-1 small:1-2 small:landscape:1-3">
 *              <div pam-Unit-Test>1-1 -> 1-2 -> landscape:1-3</div>
 *          </div>
 *          <div pam-Unit="1-1 small:1-2 small:landscape:1-3">
 *              <div pam-Unit-Test>1-1 -> 1-2 -> landscape:1-3</div>
 *          </div>
 *     </div>
 */


/**
 * Nested Responsive Grid:
 * As with the regular grid the responsive grid can be nested. This example shows
 * two units `pam-Unit="1-1 medium:1-2"` that each contain a responsive grid.
 *
 *     @example
 *     <div pam-Grid>
 *          <div pam-Unit="1-1 medium:1-2">
 *              <div pam-Unit-Test>
 *                <div pam-Grid>
 *                      <div pam-Unit="1-1 large:1-2">
 *                        <div pam-Unit-Test>1-1 -> 1-2</div>
 *                      </div>
 *                      <div pam-Unit="1-1 large:1-2">
 *                        <div pam-Unit-Test>1-1 -> 1-2</div>
 *                      </div>
 *                </div>
 *              </div>
 *          </div>
 *
 *          <div pam-Unit="1-1 medium:1-2">
 *              <div pam-Unit-Test>
 *                <div pam-Grid>
 *                      <div pam-Unit="1-3 large:1-2">
 *                        <div pam-Unit-Test>1-3 -> 1-2</div>
 *                      </div>
 *                      <div pam-Unit="1-3 large:1-4">
 *                        <div pam-Unit-Test>1-3 -> 1-4</div>
 *                      </div>
 *                      <div pam-Unit="1-3 large:1-4">
 *                        <div pam-Unit-Test>1-3 -> 1-4</div>
 *                      </div>
 *                </div>
 *              </div>
 *          </div>
 *     </div>
 */

/**
 * Responsive Grid with img content:
 * This example shows a `pam-Unit="1-1 small:1-2 large:1-4"` grid with `pam-Image`
 * elements.
 *
 *     @example
 *     <div pam-Grid>
 *          <div pam-Unit="1-1 small:1-2 large:1-4">
 *              <img pam-Image src="http://placehold.it/350x200">
 *          </div>
 *          <div pam-Unit="1-1 small:1-2 large:1-4">
 *              <img pam-Image src="http://placehold.it/350x200">
 *          </div>
 *          <div pam-Unit="1-1 small:1-2 large:1-4">
 *              <img pam-Image src="http://placehold.it/350x200">
 *          </div>
 *          <div pam-Unit="1-1 small:1-2 large:1-4">
 *              <img pam-Image src="http://placehold.it/350x200">
 *          </div>
 *     </div>
 */

[pam-Unit] {
    display: inline-block;
    letter-spacing: normal;
    word-spacing: normal;
    vertical-align: top;
    text-rendering: auto;
    .hook-unit;
}

/*
Resets the font family back to the OS/browser's default sans-serif font,
this the same font stack that Normalize.css sets for the `body`.
*/
[pam-Grid] [pam-Unit] {
    font-family: @font-family;
}

[pam-Unit~="1-24"] {
    width: 4.1667%;
}

[pam-Unit~="1-12"],
[pam-Unit~="2-24"] {
    width: 8.3333%;
}

[pam-Unit~="1-8"],
[pam-Unit~="3-24"] {
    width: 12.5000%;
}

[pam-Unit~="1-6"],
[pam-Unit~="4-24"] {
    width: 16.6667%;
}

[pam-Unit~="1-5"] {
    width: 20%;
}

[pam-Unit~="5-24"] {
    width: 20.8333%;
}

[pam-Unit~="1-4"],
[pam-Unit~="6-24"] {
    width: 25%;
}

[pam-Unit~="7-24"] {
    width: 29.1667%;
}

[pam-Unit~="1-3"],
[pam-Unit~="8-24"] {
    width: 33.3333%;
}

[pam-Unit~="3-8"],
[pam-Unit~="9-24"] {
    width: 37.5000%;
}

[pam-Unit~="2-5"] {
    width: 40%;
}

[pam-Unit~="5-12"],
[pam-Unit~="10-24"] {
    width: 41.6667%;
}

[pam-Unit~="11-24"] {
    width: 45.8333%;
}

[pam-Unit~="1-2"],
[pam-Unit~="12-24"] {
    width: 50%;
}

[pam-Unit~="13-24"] {
    width: 54.1667%;
}

[pam-Unit~="7-12"],
[pam-Unit~="14-24"] {
    width: 58.3333%;
}

[pam-Unit~="3-5"] {
    width: 60%;
}

[pam-Unit~="5-8"],
[pam-Unit~="15-24"] {
    width: 62.5000%;
}

[pam-Unit~="2-3"],
[pam-Unit~="16-24"] {
    width: 66.6667%;
}

[pam-Unit~="17-24"] {
    width: 70.8333%;
}

[pam-Unit~="3-4"],
[pam-Unit~="18-24"] {
    width: 75%;
}

[pam-Unit~="19-24"] {
    width: 79.1667%;
}

[pam-Unit~="4-5"] {
    width: 80%;
}

[pam-Unit~="5-6"],
[pam-Unit~="20-24"] {
    width: 83.3333%;
}

[pam-Unit~="7-8"],
[pam-Unit~="21-24"] {
    width: 87.5000%;
}

[pam-Unit~="11-12"],
[pam-Unit~="22-24"] {
    width: 91.6667%;
}

[pam-Unit~="23-24"] {
    width: 95.8333%;
}

[pam-Unit~="1"],
[pam-Unit~="1-1"],
[pam-Unit~="5-5"],
[pam-Unit~="24-24"] {
    width: 100%;
}

// Hooks
// ========================================================================

/**
 * Hooks:
 * `.hook-grid`
 * `.hook-unit`
 */

.hook-grid() {}
.hook-unit() {}
//  Imports
// ==========================================================================

@import "variables";

.pam-grid-unit-size(@size) {
    [pam-Unit~="@{size}:1-24"] {
        width: 4.1667%;
    }

    [pam-Unit~="@{size}:1-12"],
    [pam-Unit~="@{size}:2-24"] {
        width: 8.3333%;
    }

    [pam-Unit~="@{size}:1-8"],
    [pam-Unit~="@{size}:3-24"] {
        width: 12.5000%;
    }

    [pam-Unit~="@{size}:1-6"],
    [pam-Unit~="@{size}:4-24"] {
        width: 16.6667%;
    }

    [pam-Unit~="@{size}:1-5"] {
        width: 20%;
    }

    [pam-Unit~="@{size}:5-24"] {
        width: 20.8333%;
    }

    [pam-Unit~="@{size}:1-4"],
    [pam-Unit~="@{size}:6-24"] {
        width: 25%;
    }

    [pam-Unit~="@{size}:7-24"] {
        width: 29.1667%;
    }

    [pam-Unit~="@{size}:1-3"],
    [pam-Unit~="@{size}:8-24"] {
        width: 33.3333%;
    }

    [pam-Unit~="@{size}:3-8"],
    [pam-Unit~="@{size}:9-24"] {
        width: 37.5000%;
    }

    [pam-Unit~="@{size}:2-5"] {
        width: 40%;
    }

    [pam-Unit~="@{size}:5-12"],
    [pam-Unit~="@{size}:10-24"] {
        width: 41.6667%;
    }

    [pam-Unit~="@{size}:11-24"] {
        width: 45.8333%;
    }

    [pam-Unit~="@{size}:1-2"],
    [pam-Unit~="@{size}:12-24"] {
        width: 50%;
    }

    [pam-Unit~="@{size}:13-24"] {
        width: 54.1667%;
    }

    [pam-Unit~="@{size}:7-12"],
    [pam-Unit~="@{size}:14-24"] {
        width: 58.3333%;
    }

    [pam-Unit~="@{size}:3-5"] {
        width: 60%;
    }

    [pam-Unit~="@{size}:5-8"],
    [pam-Unit~="@{size}:15-24"] {
        width: 62.5000%;
    }

    [pam-Unit~="@{size}:2-3"],
    [pam-Unit~="@{size}:16-24"] {
        width: 66.6667%;
    }

    [pam-Unit~="@{size}:17-24"] {
        width: 70.8333%;
    }

    [pam-Unit~="@{size}:3-4"],
    [pam-Unit~="@{size}:18-24"] {
        width: 75%;
    }

    [pam-Unit~="@{size}:19-24"] {
        width: 79.1667%;
    }

    [pam-Unit~="@{size}:4-5"] {
        width: 80%;
    }

    [pam-Unit~="@{size}:5-6"],
    [pam-Unit~="@{size}:20-24"] {
        width: 83.3333%;
    }

    [pam-Unit~="@{size}:7-8"],
    [pam-Unit~="@{size}:21-24"] {
        width: 87.5000%;
    }

    [pam-Unit~="@{size}:11-12"],
    [pam-Unit~="@{size}:22-24"] {
        width: 91.6667%;
    }

    [pam-Unit~="@{size}:23-24"] {
        width: 95.8333%;
    }

    [pam-Unit~="@{size}:1"],
    [pam-Unit~="@{size}:1-1"],
    [pam-Unit~="@{size}:5-5"],
    [pam-Unit~="@{size}:24-24"] {
        width: 100%;
    }
}


// Small device breakpoint
// ========================================================================

@media screen and (min-width: @breakpoint-small) {
    .pam-grid-unit-size(small);
}

@media screen and (min-width: @breakpoint-small) and (orientation: landscape) {
    .pam-grid-unit-size("small:landscape");
}


// Medium device breakpoint
// ========================================================================

@media screen and (min-width: @breakpoint-medium) {
    .pam-grid-unit-size(medium);
}

@media screen and (min-width: @breakpoint-medium) and (orientation: landscape) {
    .pam-grid-unit-size("medium:landscape");
}


// Large device breakpoint
// ========================================================================

@media screen and (min-width: @breakpoint-large) {
    .pam-grid-unit-size(large);
}

@media screen and (min-width: @breakpoint-large) and (orientation: landscape) {
    .pam-grid-unit-size("large:landscape");
}


// Xlarge device breakpoint
// ========================================================================

@media screen and (min-width: @breakpoint-xlarge) {
    .pam-grid-unit-size(xlarge);
}

@media screen and (min-width: @breakpoint-xlarge) and (orientation: landscape) {
    .pam-grid-unit-size("xlarge:landscape");
}